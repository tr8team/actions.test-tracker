import { stringToOption } from "../util.js";
import { None, Some } from "../core/option.js";
class IoInputRetriever {
    io;
    context;
    inputValidator;
    constructor(io, context, inputValidator) {
        this.io = io;
        this.context = context;
        this.inputValidator = inputValidator;
    }
    retrieve() {
        const r = this.io.getObject("data", Some(this.inputValidator));
        return r.map(async (data) => {
            const prefix = await stringToOption(this.io.get("prefix")).unwrapOr("");
            const sha = await stringToOption(this.io.get("sha")).unwrapOr(this.context.sha);
            const repoUrl = await stringToOption(this.io.get("url")).unwrapOr(this.context.repoUrl);
            const pr = (() => {
                switch (this.context.event.__kind) {
                    case "push":
                    case "other":
                        return None();
                    case "pullRequest":
                        return Some({
                            number: this.context.event.value.number,
                            baseSha: this.context.event.value.baseRefSha,
                        });
                    default:
                        throw new Error("unreachable");
                }
            })();
            const actionUrl = this.context.actionUrl;
            return {
                data,
                sha,
                prefix,
                repoUrl,
                actionUrl,
                pr,
            };
        });
    }
}
export { IoInputRetriever };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8taW5wdXQtcmV0cmlldmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hZGFwdGVycy9pby1pbnB1dC1yZXRyaWV2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUk1QyxPQUFPLEVBQUUsSUFBSSxFQUFVLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXZELE1BQU0sZ0JBQWdCO0lBQ3BCLEVBQUUsQ0FBVztJQUNiLE9BQU8sQ0FBbUI7SUFDMUIsY0FBYyxDQUF3QjtJQUV0QyxZQUNFLEVBQVksRUFDWixPQUF5QixFQUN6QixjQUFxQztRQUVyQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQWEsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUMzRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQWdCLEVBQUUsRUFBRTtZQUN0QyxNQUFNLE1BQU0sR0FBVyxNQUFNLGNBQWMsQ0FDekMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQ3RCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWYsTUFBTSxHQUFHLEdBQVcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQ25FLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNqQixDQUFDO1lBRUYsTUFBTSxPQUFPLEdBQVcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUNyQixDQUFDO1lBRUYsTUFBTSxFQUFFLEdBQWdELENBQUMsR0FBRyxFQUFFO2dCQUM1RCxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtvQkFDakMsS0FBSyxNQUFNLENBQUM7b0JBQ1osS0FBSyxPQUFPO3dCQUNWLE9BQU8sSUFBSSxFQUFFLENBQUM7b0JBQ2hCLEtBQUssYUFBYTt3QkFDaEIsT0FBTyxJQUFJLENBQUM7NEJBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNOzRCQUN2QyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVU7eUJBQzdDLENBQUMsQ0FBQztvQkFDTDt3QkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUNsQztZQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7WUFFTCxNQUFNLFNBQVMsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNqRCxPQUFPO2dCQUNMLElBQUk7Z0JBQ0osR0FBRztnQkFDSCxNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsU0FBUztnQkFDVCxFQUFFO2FBQ0gsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dFJldHJpZXZlciwgSW5wdXRzIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9pbnB1dC1yZXRyaWV2ZXIuanNcIjtcbmltcG9ydCB7IEFjdGlvbklPIH0gZnJvbSBcIi4uL2ludGVyZmFjZS9pby5qc1wiO1xuaW1wb3J0IHsgQ29udGV4dFJldHJpZXZlciB9IGZyb20gXCIuLi9pbnRlcmZhY2UvY29udGV4dC1yZXRyaWV2ZXIuanNcIjtcbmltcG9ydCB7IHN0cmluZ1RvT3B0aW9uIH0gZnJvbSBcIi4uL3V0aWwuanNcIjtcbmltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gXCIuLi9pbnRlcmZhY2UvdmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgeyBJbnB1dEFycmF5IH0gZnJvbSBcIi4uL2lucHV0cy5qc1wiO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uL2NvcmUvcmVzdWx0LmpzXCI7XG5pbXBvcnQgeyBOb25lLCBPcHRpb24sIFNvbWUgfSBmcm9tIFwiLi4vY29yZS9vcHRpb24uanNcIjtcblxuY2xhc3MgSW9JbnB1dFJldHJpZXZlciBpbXBsZW1lbnRzIElucHV0UmV0cmlldmVyIHtcbiAgaW86IEFjdGlvbklPO1xuICBjb250ZXh0OiBDb250ZXh0UmV0cmlldmVyO1xuICBpbnB1dFZhbGlkYXRvcjogVmFsaWRhdG9yPElucHV0QXJyYXk+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGlvOiBBY3Rpb25JTyxcbiAgICBjb250ZXh0OiBDb250ZXh0UmV0cmlldmVyLFxuICAgIGlucHV0VmFsaWRhdG9yOiBWYWxpZGF0b3I8SW5wdXRBcnJheT5cbiAgKSB7XG4gICAgdGhpcy5pbyA9IGlvO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5pbnB1dFZhbGlkYXRvciA9IGlucHV0VmFsaWRhdG9yO1xuICB9XG5cbiAgcmV0cmlldmUoKTogUmVzdWx0PElucHV0cywgRXJyb3I+IHtcbiAgICBjb25zdCByID0gdGhpcy5pby5nZXRPYmplY3Q8SW5wdXRBcnJheT4oXCJkYXRhXCIsIFNvbWUodGhpcy5pbnB1dFZhbGlkYXRvcikpO1xuICAgIHJldHVybiByLm1hcChhc3luYyAoZGF0YTogSW5wdXRBcnJheSkgPT4ge1xuICAgICAgY29uc3QgcHJlZml4OiBzdHJpbmcgPSBhd2FpdCBzdHJpbmdUb09wdGlvbihcbiAgICAgICAgdGhpcy5pby5nZXQoXCJwcmVmaXhcIilcbiAgICAgICkudW53cmFwT3IoXCJcIik7XG5cbiAgICAgIGNvbnN0IHNoYTogc3RyaW5nID0gYXdhaXQgc3RyaW5nVG9PcHRpb24odGhpcy5pby5nZXQoXCJzaGFcIikpLnVud3JhcE9yKFxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXBvVXJsOiBzdHJpbmcgPSBhd2FpdCBzdHJpbmdUb09wdGlvbih0aGlzLmlvLmdldChcInVybFwiKSkudW53cmFwT3IoXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXBvVXJsXG4gICAgICApO1xuXG4gICAgICBjb25zdCBwcjogT3B0aW9uPHsgbnVtYmVyOiBudW1iZXI7IGJhc2VTaGE6IHN0cmluZyB9PiA9ICgoKSA9PiB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jb250ZXh0LmV2ZW50Ll9fa2luZCkge1xuICAgICAgICAgIGNhc2UgXCJwdXNoXCI6XG4gICAgICAgICAgY2FzZSBcIm90aGVyXCI6XG4gICAgICAgICAgICByZXR1cm4gTm9uZSgpO1xuICAgICAgICAgIGNhc2UgXCJwdWxsUmVxdWVzdFwiOlxuICAgICAgICAgICAgcmV0dXJuIFNvbWUoe1xuICAgICAgICAgICAgICBudW1iZXI6IHRoaXMuY29udGV4dC5ldmVudC52YWx1ZS5udW1iZXIsXG4gICAgICAgICAgICAgIGJhc2VTaGE6IHRoaXMuY29udGV4dC5ldmVudC52YWx1ZS5iYXNlUmVmU2hhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuXG4gICAgICBjb25zdCBhY3Rpb25Vcmw6IHN0cmluZyA9IHRoaXMuY29udGV4dC5hY3Rpb25Vcmw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhLFxuICAgICAgICBzaGEsXG4gICAgICAgIHByZWZpeCxcbiAgICAgICAgcmVwb1VybCxcbiAgICAgICAgYWN0aW9uVXJsLFxuICAgICAgICBwcixcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSW9JbnB1dFJldHJpZXZlciB9O1xuIl19