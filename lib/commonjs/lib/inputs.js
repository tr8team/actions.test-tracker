import { array, object, literal, number, string, discriminatedUnion, } from "zod";
const testCoverageMetadata = object({
    type: literal("test-coverage"),
    line: number().min(0).max(100),
    statement: number().min(0).max(100),
    function: number().min(0).max(100),
    branch: number().min(0).max(100),
}).strict();
const testResultMetadata = object({
    type: literal("test-result"),
    pass: number().min(0),
    fail: number().min(0),
    skip: number().min(0),
}).strict();
const documentationMetadata = object({
    type: literal("documentation"),
}).strict();
const codeQualityMetadata = object({
    type: literal("code-quality"),
    qualityRating: string(),
}).strict();
const metadata = discriminatedUnion("type", [
    codeQualityMetadata,
    documentationMetadata,
    testCoverageMetadata,
    testResultMetadata,
]);
const input = object({
    name: string(),
    url: string().url(),
    data: metadata,
}).strict();
const inputArray = array(input);
const historyEntry = object({
    sha: string(),
    url: string(),
    action: string(),
    items: inputArray,
}).strict();
const history = array(historyEntry);
export { metadata, input, inputArray, historyEntry, history };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLEtBQUssRUFDTCxNQUFNLEVBQ04sT0FBTyxFQUNQLE1BQU0sRUFDTixNQUFNLEVBQ04sa0JBQWtCLEdBRW5CLE1BQU0sS0FBSyxDQUFDO0FBRWIsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUM7SUFDbEMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFDOUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzlCLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUNuQyxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDbEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0NBQ2pDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVaLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLElBQUksRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQzVCLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ3RCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVaLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxDQUFDO0lBQ25DLElBQUksRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDO0NBQy9CLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVaLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDO0lBQ2pDLElBQUksRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQzdCLGFBQWEsRUFBRSxNQUFNLEVBQUU7Q0FDeEIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRVosTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxFQUFFO0lBQzFDLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtDQUNuQixDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDbkIsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUNkLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUU7SUFDbkIsSUFBSSxFQUFFLFFBQVE7Q0FDZixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFWixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFaEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQzFCLEdBQUcsRUFBRSxNQUFNLEVBQUU7SUFDYixHQUFHLEVBQUUsTUFBTSxFQUFFO0lBQ2IsTUFBTSxFQUFFLE1BQU0sRUFBRTtJQUNoQixLQUFLLEVBQUUsVUFBVTtDQUNsQixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFWixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7QUFPcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGFycmF5LFxuICBvYmplY3QsXG4gIGxpdGVyYWwsXG4gIG51bWJlcixcbiAgc3RyaW5nLFxuICBkaXNjcmltaW5hdGVkVW5pb24sXG4gIHosXG59IGZyb20gXCJ6b2RcIjtcblxuY29uc3QgdGVzdENvdmVyYWdlTWV0YWRhdGEgPSBvYmplY3Qoe1xuICB0eXBlOiBsaXRlcmFsKFwidGVzdC1jb3ZlcmFnZVwiKSxcbiAgbGluZTogbnVtYmVyKCkubWluKDApLm1heCgxMDApLFxuICBzdGF0ZW1lbnQ6IG51bWJlcigpLm1pbigwKS5tYXgoMTAwKSxcbiAgZnVuY3Rpb246IG51bWJlcigpLm1pbigwKS5tYXgoMTAwKSxcbiAgYnJhbmNoOiBudW1iZXIoKS5taW4oMCkubWF4KDEwMCksXG59KS5zdHJpY3QoKTtcblxuY29uc3QgdGVzdFJlc3VsdE1ldGFkYXRhID0gb2JqZWN0KHtcbiAgdHlwZTogbGl0ZXJhbChcInRlc3QtcmVzdWx0XCIpLFxuICBwYXNzOiBudW1iZXIoKS5taW4oMCksXG4gIGZhaWw6IG51bWJlcigpLm1pbigwKSxcbiAgc2tpcDogbnVtYmVyKCkubWluKDApLFxufSkuc3RyaWN0KCk7XG5cbmNvbnN0IGRvY3VtZW50YXRpb25NZXRhZGF0YSA9IG9iamVjdCh7XG4gIHR5cGU6IGxpdGVyYWwoXCJkb2N1bWVudGF0aW9uXCIpLFxufSkuc3RyaWN0KCk7XG5cbmNvbnN0IGNvZGVRdWFsaXR5TWV0YWRhdGEgPSBvYmplY3Qoe1xuICB0eXBlOiBsaXRlcmFsKFwiY29kZS1xdWFsaXR5XCIpLFxuICBxdWFsaXR5UmF0aW5nOiBzdHJpbmcoKSxcbn0pLnN0cmljdCgpO1xuXG5jb25zdCBtZXRhZGF0YSA9IGRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICBjb2RlUXVhbGl0eU1ldGFkYXRhLFxuICBkb2N1bWVudGF0aW9uTWV0YWRhdGEsXG4gIHRlc3RDb3ZlcmFnZU1ldGFkYXRhLFxuICB0ZXN0UmVzdWx0TWV0YWRhdGEsXG5dKTtcblxuY29uc3QgaW5wdXQgPSBvYmplY3Qoe1xuICBuYW1lOiBzdHJpbmcoKSxcbiAgdXJsOiBzdHJpbmcoKS51cmwoKSxcbiAgZGF0YTogbWV0YWRhdGEsXG59KS5zdHJpY3QoKTtcblxuY29uc3QgaW5wdXRBcnJheSA9IGFycmF5KGlucHV0KTtcblxuY29uc3QgaGlzdG9yeUVudHJ5ID0gb2JqZWN0KHtcbiAgc2hhOiBzdHJpbmcoKSxcbiAgdXJsOiBzdHJpbmcoKSxcbiAgYWN0aW9uOiBzdHJpbmcoKSxcbiAgaXRlbXM6IGlucHV0QXJyYXksXG59KS5zdHJpY3QoKTtcblxuY29uc3QgaGlzdG9yeSA9IGFycmF5KGhpc3RvcnlFbnRyeSk7XG5cbnR5cGUgSW5wdXQgPSB6LmluZmVyPHR5cGVvZiBpbnB1dD47XG50eXBlIElucHV0QXJyYXkgPSB6LmluZmVyPHR5cGVvZiBpbnB1dEFycmF5PjtcbnR5cGUgSGlzdG9yeUVudHJ5ID0gei5pbmZlcjx0eXBlb2YgaGlzdG9yeUVudHJ5PjtcbnR5cGUgSGlzdG9yeSA9IHouaW5mZXI8dHlwZW9mIGhpc3Rvcnk+O1xuXG5leHBvcnQgeyBtZXRhZGF0YSwgaW5wdXQsIGlucHV0QXJyYXksIGhpc3RvcnlFbnRyeSwgaGlzdG9yeSB9O1xuXG5leHBvcnQgdHlwZSB7IElucHV0LCBJbnB1dEFycmF5LCBIaXN0b3J5RW50cnksIEhpc3RvcnkgfTtcbiJdfQ==