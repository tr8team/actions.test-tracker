import { KResult } from "./result.js";
import { UnwrapError } from "./error.js";
class Opt {
    // takes in a list of options and returns a new option with a list of some values if all the results are some, and none if any are none
    /**
     * @template T
     * @param i - list of options
     */
    static all(...i) {
        const closure = async () => {
            const some = [];
            let none = 0;
            const r = i.map(async (e) => {
                const isSome = await e.isSome();
                if (isSome) {
                    const ok = await e.unwrap();
                    return ["some", ok];
                }
                else {
                    return ["none", null];
                }
            });
            const a = await Promise.all(r);
            for (const [t, v] of a) {
                if (t === "some") {
                    some.push(v);
                }
                else {
                    none++;
                }
            }
            if (none > 0) {
                return None();
            }
            return Some(some);
        };
        return Opt.fromAsync(closure());
    }
    // Resolve the promise of an option, Promise<Option<T>> to Option<T> without async/await
    /**
     * @template T
     * @param p - promise of an option to resolve
     * @returns {Option<T>} resolved option
     */
    static fromAsync(p) {
        return new KOption((async () => {
            const r = await p;
            const isSome = await r.isSome();
            if (isSome) {
                const ok = await r.unwrap();
                return Promise.resolve(["some", ok]);
            }
            return Promise.resolve(["none", null]);
        })());
    }
    // Create an Option from an async function
    /**
     * @template T
     * @param fn - async function that returns an option
     * @returns {Option<T>} option from the async function
     */
    static async(fn) {
        return Opt.fromAsync(fn());
    }
}
class KOption {
    constructor(value) {
        this.value = Promise.resolve(value);
    }
    value;
    async native() {
        const [, v] = await this.value;
        return v;
    }
    andThen(fn) {
        return new KOption((async () => {
            const [type, value] = await this.value;
            if (type === "none") {
                return [type, value];
            }
            else {
                const mapped = await fn(value);
                const isSome = await mapped.isSome();
                if (isSome) {
                    const v = mapped.unwrap();
                    return ["some", v];
                }
                else {
                    return ["none", null];
                }
            }
        })());
    }
    asErr(ok) {
        return new KResult((async () => {
            const [t, v] = await this.value;
            if (t === "none") {
                const s = await ok;
                return ["ok", s];
            }
            else {
                return ["err", v];
            }
        })());
    }
    asOk(err) {
        return new KResult((async () => {
            const [t, v] = await this.value;
            if (t === "none") {
                const s = await err;
                return ["err", s];
            }
            else {
                return ["ok", v];
            }
        })());
    }
    asResult(fn) {
        return new KResult(Promise.resolve(["ok", 0])).andThen(async () => {
            const [t, v] = await this.value;
            return await (async () => {
                if (t === "none") {
                    if (typeof fn.none === "function") {
                        const f = fn.none;
                        return Promise.resolve(f());
                    }
                    else {
                        return Promise.resolve(fn.none);
                    }
                }
                else {
                    return fn.some(v);
                }
            })();
        });
    }
    async isNone() {
        const [t] = await this.value;
        return t === "none";
    }
    async isSome() {
        const [t] = await this.value;
        return t === "some";
    }
    map(fn) {
        return new KOption((async () => {
            const [t, v] = await this.value;
            if (t === "none") {
                return [t, v];
            }
            else {
                const fv = await fn(v);
                return [t, fv];
            }
        })());
    }
    async match(fn) {
        const [t, v] = await this.value;
        if (t === "some") {
            return Promise.resolve(fn.some(v));
        }
        else {
            if (typeof fn.none === "function") {
                const f = fn.none;
                return Promise.resolve(f());
            }
            else {
                return Promise.resolve(fn.none);
            }
        }
    }
    run(sideEffect) {
        return new KOption((async () => {
            const [t, v] = await this.value;
            if (t === "none") {
                return [t, v];
            }
            else {
                await sideEffect(v);
                return [t, v];
            }
        })());
    }
    async unwrap() {
        const [t, v] = await this.value;
        if (t === "some") {
            return v;
        }
        else {
            throw new UnwrapError("Failed to unwrap", "option", "Expected Some got None");
        }
    }
    async unwrapOr(def) {
        const [t, v] = await this.value;
        if (t === "some") {
            return v;
        }
        else {
            if (typeof def === "function") {
                const f = def;
                return Promise.resolve(f());
            }
            else {
                return def;
            }
        }
    }
}
function Some(v) {
    return new KOption(Promise.resolve(["some", v]));
}
function None() {
    return new KOption(Promise.resolve(["none", null]));
}
export { KOption, Some, None, Opt };
//# sourceMappingURL=data:application/json;base64,