// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { Context } from "@actions/github/lib/context";
class GithubActionContextRetriever {
    #context;
    constructor() {
        this.#context = new Context();
    }
    get event() {
        if (this.#context.eventName === "push") {
            const event = this.#context.payload;
            const push = {
                ref: event.ref,
                shaAfter: event.after,
                shaBefore: event.before,
            };
            return {
                __kind: "push",
                value: push,
            };
        }
        else if (this.#context.eventName === "pull_request") {
            const event = this.#context.payload;
            const pr = {
                number: event.number,
                pullRequestState: event.pull_request.state,
                baseRef: event.pull_request.base.ref,
                baseRefSha: event.pull_request.base.sha,
            };
            return {
                __kind: "pullRequest",
                value: pr,
            };
        }
        else {
            return {
                __kind: "other",
                value: this.#context.payload,
            };
        }
    }
    get sha() {
        return this.#context.sha;
    }
    get baseUrl() {
        return `${this.#context.serverUrl}/${this.#context.repo.owner}/${this.#context.repo.repo}`;
    }
    get actionUrl() {
        return `${this.baseUrl}/actions/runs/${this.#context.runId}/jobs/${this.#context.job}`;
    }
    get repoUrl() {
        return `${this.baseUrl}/tree/${this.sha}`;
    }
    get org() {
        return this.#context.repo.owner;
    }
    get repo() {
        return this.#context.repo.repo;
    }
}
export { GithubActionContextRetriever };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLWFjdGlvbi1jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V4dGVybmFsL2dpdGh1Yi1hY3Rpb24tY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSw2REFBNkQ7QUFDN0QsYUFBYTtBQUNiLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RCxNQUFNLDRCQUE0QjtJQUNoQyxRQUFRLENBQVU7SUFDbEI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEtBQUssTUFBTSxFQUFFO1lBQ3RDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBb0IsQ0FBQztZQUNqRCxNQUFNLElBQUksR0FBRztnQkFDWCxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7Z0JBQ2QsUUFBUSxFQUFFLEtBQUssQ0FBQyxLQUFLO2dCQUNyQixTQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU07YUFDeEIsQ0FBQztZQUNGLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsS0FBSyxFQUFFLElBQUk7YUFDWixDQUFDO1NBQ0g7YUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxLQUFLLGNBQWMsRUFBRTtZQUNyRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQTJCLENBQUM7WUFDeEQsTUFBTSxFQUFFLEdBQWlDO2dCQUN2QyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07Z0JBQ3BCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSztnQkFDMUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQ3BDLFVBQVUsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHO2FBQ3hDLENBQUM7WUFDRixPQUFPO2dCQUNMLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixLQUFLLEVBQUUsRUFBRTthQUNWLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTztnQkFDTCxNQUFNLEVBQUUsT0FBTztnQkFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPO2FBQzdCLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUNyQixFQUFFLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLGlCQUFpQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssU0FDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUNoQixFQUFFLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLFNBQVMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDakMsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb250ZXh0UmV0cmlldmVyLFxuICBHaXRIdWJBY3Rpb25FdmVudCxcbiAgR2l0SHViQWN0aW9uUHVsbFJlcXVlc3RFdmVudCxcbn0gZnJvbSBcIi4uL2xpYi9pbnRlcmZhY2UvY29udGV4dC1yZXRyaWV2ZXIuanNcIjtcbmltcG9ydCB7IFB1bGxSZXF1ZXN0RXZlbnQsIFB1c2hFdmVudCB9IGZyb20gXCJAb2N0b2tpdC93ZWJob29rcy10eXBlc1wiO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gXCJAYWN0aW9ucy9naXRodWIvbGliL2NvbnRleHRcIjtcblxuY2xhc3MgR2l0aHViQWN0aW9uQ29udGV4dFJldHJpZXZlciBpbXBsZW1lbnRzIENvbnRleHRSZXRyaWV2ZXIge1xuICAjY29udGV4dDogQ29udGV4dDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy4jY29udGV4dCA9IG5ldyBDb250ZXh0KCk7XG4gIH1cblxuICBnZXQgZXZlbnQoKTogR2l0SHViQWN0aW9uRXZlbnQge1xuICAgIGlmICh0aGlzLiNjb250ZXh0LmV2ZW50TmFtZSA9PT0gXCJwdXNoXCIpIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy4jY29udGV4dC5wYXlsb2FkIGFzIFB1c2hFdmVudDtcbiAgICAgIGNvbnN0IHB1c2ggPSB7XG4gICAgICAgIHJlZjogZXZlbnQucmVmLFxuICAgICAgICBzaGFBZnRlcjogZXZlbnQuYWZ0ZXIsXG4gICAgICAgIHNoYUJlZm9yZTogZXZlbnQuYmVmb3JlLFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9fa2luZDogXCJwdXNoXCIsXG4gICAgICAgIHZhbHVlOiBwdXNoLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuI2NvbnRleHQuZXZlbnROYW1lID09PSBcInB1bGxfcmVxdWVzdFwiKSB7XG4gICAgICBjb25zdCBldmVudCA9IHRoaXMuI2NvbnRleHQucGF5bG9hZCBhcyBQdWxsUmVxdWVzdEV2ZW50O1xuICAgICAgY29uc3QgcHI6IEdpdEh1YkFjdGlvblB1bGxSZXF1ZXN0RXZlbnQgPSB7XG4gICAgICAgIG51bWJlcjogZXZlbnQubnVtYmVyLFxuICAgICAgICBwdWxsUmVxdWVzdFN0YXRlOiBldmVudC5wdWxsX3JlcXVlc3Quc3RhdGUsXG4gICAgICAgIGJhc2VSZWY6IGV2ZW50LnB1bGxfcmVxdWVzdC5iYXNlLnJlZixcbiAgICAgICAgYmFzZVJlZlNoYTogZXZlbnQucHVsbF9yZXF1ZXN0LmJhc2Uuc2hhLFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9fa2luZDogXCJwdWxsUmVxdWVzdFwiLFxuICAgICAgICB2YWx1ZTogcHIsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfX2tpbmQ6IFwib3RoZXJcIixcbiAgICAgICAgdmFsdWU6IHRoaXMuI2NvbnRleHQucGF5bG9hZCxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZ2V0IHNoYSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLiNjb250ZXh0LnNoYTtcbiAgfVxuXG4gIGdldCBiYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuI2NvbnRleHQuc2VydmVyVXJsfS8ke3RoaXMuI2NvbnRleHQucmVwby5vd25lcn0vJHtcbiAgICAgIHRoaXMuI2NvbnRleHQucmVwby5yZXBvXG4gICAgfWA7XG4gIH1cblxuICBnZXQgYWN0aW9uVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuYmFzZVVybH0vYWN0aW9ucy9ydW5zLyR7dGhpcy4jY29udGV4dC5ydW5JZH0vam9icy8ke1xuICAgICAgdGhpcy4jY29udGV4dC5qb2JcbiAgICB9YDtcbiAgfVxuXG4gIGdldCByZXBvVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuYmFzZVVybH0vdHJlZS8ke3RoaXMuc2hhfWA7XG4gIH1cblxuICBnZXQgb3JnKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuI2NvbnRleHQucmVwby5vd25lcjtcbiAgfVxuXG4gIGdldCByZXBvKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuI2NvbnRleHQucmVwby5yZXBvO1xuICB9XG59XG5cbmV4cG9ydCB7IEdpdGh1YkFjdGlvbkNvbnRleHRSZXRyaWV2ZXIgfTtcbiJdfQ==