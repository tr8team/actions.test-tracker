// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import { Context } from "@actions/github/lib/context";
class GithubActionContextRetriever {
    #context;
    constructor() {
        this.#context = new Context();
    }
    get event() {
        if (this.#context.eventName === "push") {
            const event = this.#context.payload;
            const push = {
                ref: event.ref,
                shaAfter: event.after,
                shaBefore: event.before,
            };
            return {
                __kind: "push",
                value: push,
            };
        }
        else if (this.#context.eventName === "pull_request") {
            const event = this.#context.payload;
            const pr = {
                number: event.number,
                pullRequestState: event.pull_request.state,
                baseRef: event.pull_request.base.ref,
                baseRefSha: event.pull_request.base.sha,
            };
            return {
                __kind: "pullRequest",
                value: pr,
            };
        }
        else {
            return {
                __kind: "other",
                value: this.#context.payload,
            };
        }
    }
    get sha() {
        if (this.#context.eventName === "push") {
            const event = this.#context.payload;
            return event.after;
        }
        else if (this.#context.eventName === "pull_request") {
            const event = this.#context.payload;
            return event.pull_request.head.sha;
        }
        else {
            return this.#context.sha;
        }
    }
    get baseUrl() {
        return `${this.#context.serverUrl}/${this.#context.repo.owner}/${this.#context.repo.repo}`;
    }
    get actionUrl() {
        return `${this.baseUrl}/actions/runs/${this.#context.runId}`;
    }
    get repoUrl() {
        return `${this.baseUrl}/tree/${this.sha}`;
    }
    get org() {
        return this.#context.repo.owner;
    }
    get repo() {
        return this.#context.repo.repo;
    }
}
export { GithubActionContextRetriever };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLWFjdGlvbi1jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2V4dGVybmFsL2dpdGh1Yi1hY3Rpb24tY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSw2REFBNkQ7QUFDN0QsYUFBYTtBQUNiLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RCxNQUFNLDRCQUE0QjtJQUNoQyxRQUFRLENBQVU7SUFFbEI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEtBQUssTUFBTSxFQUFFO1lBQ3RDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBb0IsQ0FBQztZQUNqRCxNQUFNLElBQUksR0FBRztnQkFDWCxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7Z0JBQ2QsUUFBUSxFQUFFLEtBQUssQ0FBQyxLQUFLO2dCQUNyQixTQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU07YUFDeEIsQ0FBQztZQUNGLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsS0FBSyxFQUFFLElBQUk7YUFDWixDQUFDO1NBQ0g7YUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxLQUFLLGNBQWMsRUFBRTtZQUNyRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQTJCLENBQUM7WUFDeEQsTUFBTSxFQUFFLEdBQWlDO2dCQUN2QyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07Z0JBQ3BCLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSztnQkFDMUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUc7Z0JBQ3BDLFVBQVUsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHO2FBQ3hDLENBQUM7WUFDRixPQUFPO2dCQUNMLE1BQU0sRUFBRSxhQUFhO2dCQUNyQixLQUFLLEVBQUUsRUFBRTthQUNWLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTztnQkFDTCxNQUFNLEVBQUUsT0FBTztnQkFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPO2FBQzdCLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDTCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxLQUFLLE1BQU0sRUFBRTtZQUN0QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQW9CLENBQUM7WUFDakQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO1NBQ3BCO2FBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsS0FBSyxjQUFjLEVBQUU7WUFDckQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUEyQixDQUFDO1lBQ3hELE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ3BDO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQ3JCLEVBQUUsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8saUJBQWlCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0QsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2pDLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29udGV4dFJldHJpZXZlcixcbiAgR2l0SHViQWN0aW9uRXZlbnQsXG4gIEdpdEh1YkFjdGlvblB1bGxSZXF1ZXN0RXZlbnQsXG59IGZyb20gXCIuLi9saWIvaW50ZXJmYWNlL2NvbnRleHQtcmV0cmlldmVyLmpzXCI7XG5pbXBvcnQgeyBQdWxsUmVxdWVzdEV2ZW50LCBQdXNoRXZlbnQgfSBmcm9tIFwiQG9jdG9raXQvd2ViaG9va3MtdHlwZXNcIjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tIFwiQGFjdGlvbnMvZ2l0aHViL2xpYi9jb250ZXh0XCI7XG5cbmNsYXNzIEdpdGh1YkFjdGlvbkNvbnRleHRSZXRyaWV2ZXIgaW1wbGVtZW50cyBDb250ZXh0UmV0cmlldmVyIHtcbiAgI2NvbnRleHQ6IENvbnRleHQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy4jY29udGV4dCA9IG5ldyBDb250ZXh0KCk7XG4gIH1cblxuICBnZXQgZXZlbnQoKTogR2l0SHViQWN0aW9uRXZlbnQge1xuICAgIGlmICh0aGlzLiNjb250ZXh0LmV2ZW50TmFtZSA9PT0gXCJwdXNoXCIpIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy4jY29udGV4dC5wYXlsb2FkIGFzIFB1c2hFdmVudDtcbiAgICAgIGNvbnN0IHB1c2ggPSB7XG4gICAgICAgIHJlZjogZXZlbnQucmVmLFxuICAgICAgICBzaGFBZnRlcjogZXZlbnQuYWZ0ZXIsXG4gICAgICAgIHNoYUJlZm9yZTogZXZlbnQuYmVmb3JlLFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9fa2luZDogXCJwdXNoXCIsXG4gICAgICAgIHZhbHVlOiBwdXNoLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuI2NvbnRleHQuZXZlbnROYW1lID09PSBcInB1bGxfcmVxdWVzdFwiKSB7XG4gICAgICBjb25zdCBldmVudCA9IHRoaXMuI2NvbnRleHQucGF5bG9hZCBhcyBQdWxsUmVxdWVzdEV2ZW50O1xuICAgICAgY29uc3QgcHI6IEdpdEh1YkFjdGlvblB1bGxSZXF1ZXN0RXZlbnQgPSB7XG4gICAgICAgIG51bWJlcjogZXZlbnQubnVtYmVyLFxuICAgICAgICBwdWxsUmVxdWVzdFN0YXRlOiBldmVudC5wdWxsX3JlcXVlc3Quc3RhdGUsXG4gICAgICAgIGJhc2VSZWY6IGV2ZW50LnB1bGxfcmVxdWVzdC5iYXNlLnJlZixcbiAgICAgICAgYmFzZVJlZlNoYTogZXZlbnQucHVsbF9yZXF1ZXN0LmJhc2Uuc2hhLFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9fa2luZDogXCJwdWxsUmVxdWVzdFwiLFxuICAgICAgICB2YWx1ZTogcHIsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfX2tpbmQ6IFwib3RoZXJcIixcbiAgICAgICAgdmFsdWU6IHRoaXMuI2NvbnRleHQucGF5bG9hZCxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZ2V0IHNoYSgpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLiNjb250ZXh0LmV2ZW50TmFtZSA9PT0gXCJwdXNoXCIpIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy4jY29udGV4dC5wYXlsb2FkIGFzIFB1c2hFdmVudDtcbiAgICAgIHJldHVybiBldmVudC5hZnRlcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuI2NvbnRleHQuZXZlbnROYW1lID09PSBcInB1bGxfcmVxdWVzdFwiKSB7XG4gICAgICBjb25zdCBldmVudCA9IHRoaXMuI2NvbnRleHQucGF5bG9hZCBhcyBQdWxsUmVxdWVzdEV2ZW50O1xuICAgICAgcmV0dXJuIGV2ZW50LnB1bGxfcmVxdWVzdC5oZWFkLnNoYTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuI2NvbnRleHQuc2hhO1xuICAgIH1cbiAgfVxuXG4gIGdldCBiYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuI2NvbnRleHQuc2VydmVyVXJsfS8ke3RoaXMuI2NvbnRleHQucmVwby5vd25lcn0vJHtcbiAgICAgIHRoaXMuI2NvbnRleHQucmVwby5yZXBvXG4gICAgfWA7XG4gIH1cblxuICBnZXQgYWN0aW9uVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuYmFzZVVybH0vYWN0aW9ucy9ydW5zLyR7dGhpcy4jY29udGV4dC5ydW5JZH1gO1xuICB9XG5cbiAgZ2V0IHJlcG9VcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5iYXNlVXJsfS90cmVlLyR7dGhpcy5zaGF9YDtcbiAgfVxuXG4gIGdldCBvcmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy4jY29udGV4dC5yZXBvLm93bmVyO1xuICB9XG5cbiAgZ2V0IHJlcG8oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy4jY29udGV4dC5yZXBvLnJlcG87XG4gIH1cbn1cblxuZXhwb3J0IHsgR2l0aHViQWN0aW9uQ29udGV4dFJldHJpZXZlciB9O1xuIl19