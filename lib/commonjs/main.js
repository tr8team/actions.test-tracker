import { App } from "./lib/main.js";
import { GithubActionIO } from "./external/github-action-i-o.js";
import { GithubActionLogger } from "./external/github-action-logger.js";
import { ZodValidatorAdapter } from "./lib/adapters/zod-validator-adapter.js";
import { inputArray } from "./lib/inputs.js";
import { GistKeyValue } from "./external/gist-key-value.js";
import { Octokit } from "@octokit/rest";
import { IoInputRetriever } from "./lib/adapters/io-input-retriever.js";
import { GithubActionContextRetriever } from "./external/github-action-context.js";
import { HistoryService } from "./lib/service.js";
import { setFailed } from "@actions/core";
import { stringToOption } from "./lib/util";
import * as os from "os";
async function main() {
    const io = new GithubActionIO();
    const log = new GithubActionLogger();
    const auth = io.get("github_token");
    const gistId = io.get("gist_id");
    const ok = new Octokit({ auth });
    const kv = new GistKeyValue(ok, gistId);
    const context = new GithubActionContextRetriever();
    const inputValidator = new ZodValidatorAdapter(inputArray);
    const input = new IoInputRetriever(io, context, inputValidator);
    const service = new HistoryService(kv);
    const app = new App(io, input, service);
    await app.start().match({
        none: () => {
            log.info("✅ Successfully tracked commit artifact metadata");
        },
        some: async (err) => {
            log.error("❌ Failed to track commit artifact metadata");
            setFailed(err);
            const messages = await stringToOption(err?.stack).match({
                none: ["❌ No stacktrace found!"],
                some: (stacktrace) => stacktrace.split(os.EOL),
            });
            for (const m of messages) {
                log.error(m);
            }
        },
    });
}
await main();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQzlFLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFNUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUl4RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVuRixPQUFPLEVBQUUsY0FBYyxFQUFtQixNQUFNLGtCQUFrQixDQUFDO0FBRW5FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM1QyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixLQUFLLFVBQVUsSUFBSTtJQUNqQixNQUFNLEVBQUUsR0FBYSxJQUFJLGNBQWMsRUFBRSxDQUFDO0lBQzFDLE1BQU0sR0FBRyxHQUFZLElBQUksa0JBQWtCLEVBQUUsQ0FBQztJQUM5QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakMsTUFBTSxFQUFFLEdBQUcsSUFBSSxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sRUFBRSxHQUF1QixJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUQsTUFBTSxPQUFPLEdBQXFCLElBQUksNEJBQTRCLEVBQUUsQ0FBQztJQUNyRSxNQUFNLGNBQWMsR0FBMEIsSUFBSSxtQkFBbUIsQ0FDbkUsVUFBVSxDQUNYLENBQUM7SUFDRixNQUFNLEtBQUssR0FBbUIsSUFBSSxnQkFBZ0IsQ0FDaEQsRUFBRSxFQUNGLE9BQU8sRUFDUCxjQUFjLENBQ2YsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFvQixJQUFJLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4RCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXhDLE1BQU0sR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQztRQUN0QixJQUFJLEVBQUUsR0FBRyxFQUFFO1lBQ1QsR0FBRyxDQUFDLElBQUksQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFDRCxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ2xCLEdBQUcsQ0FBQyxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztZQUN4RCxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixNQUFNLFFBQVEsR0FBRyxNQUFNLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUN0RCxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDaEMsSUFBSSxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDL0MsQ0FBQyxDQUFBO1lBQ0YsS0FBSyxNQUFNLENBQUMsSUFBSSxRQUFRLEVBQUU7Z0JBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDZDtRQUNILENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2xpYi9tYWluLmpzXCI7XG5pbXBvcnQgeyBHaXRodWJBY3Rpb25JTyB9IGZyb20gXCIuL2V4dGVybmFsL2dpdGh1Yi1hY3Rpb24taS1vLmpzXCI7XG5pbXBvcnQgeyBHaXRodWJBY3Rpb25Mb2dnZXIgfSBmcm9tIFwiLi9leHRlcm5hbC9naXRodWItYWN0aW9uLWxvZ2dlci5qc1wiO1xuaW1wb3J0IHsgWm9kVmFsaWRhdG9yQWRhcHRlciB9IGZyb20gXCIuL2xpYi9hZGFwdGVycy96b2QtdmFsaWRhdG9yLWFkYXB0ZXIuanNcIjtcbmltcG9ydCB7IElucHV0QXJyYXksIGlucHV0QXJyYXkgfSBmcm9tIFwiLi9saWIvaW5wdXRzLmpzXCI7XG5pbXBvcnQgeyBHaXN0S2V5VmFsdWUgfSBmcm9tIFwiLi9leHRlcm5hbC9naXN0LWtleS12YWx1ZS5qc1wiO1xuaW1wb3J0IHsgQWN0aW9uSU8gfSBmcm9tIFwiLi9saWIvaW50ZXJmYWNlL2lvLmpzXCI7XG5pbXBvcnQgeyBPY3Rva2l0IH0gZnJvbSBcIkBvY3Rva2l0L3Jlc3RcIjtcbmltcG9ydCB7IElvSW5wdXRSZXRyaWV2ZXIgfSBmcm9tIFwiLi9saWIvYWRhcHRlcnMvaW8taW5wdXQtcmV0cmlldmVyLmpzXCI7XG5pbXBvcnQgeyBJbnB1dFJldHJpZXZlciB9IGZyb20gXCIuL2xpYi9pbnRlcmZhY2UvaW5wdXQtcmV0cmlldmVyLmpzXCI7XG5pbXBvcnQgeyBLZXlWYWx1ZVJlcG9zaXRvcnkgfSBmcm9tIFwiLi9saWIvaW50ZXJmYWNlL3JlcG8uanNcIjtcbmltcG9ydCB7IENvbnRleHRSZXRyaWV2ZXIgfSBmcm9tIFwiLi9saWIvaW50ZXJmYWNlL2NvbnRleHQtcmV0cmlldmVyLmpzXCI7XG5pbXBvcnQgeyBHaXRodWJBY3Rpb25Db250ZXh0UmV0cmlldmVyIH0gZnJvbSBcIi4vZXh0ZXJuYWwvZ2l0aHViLWFjdGlvbi1jb250ZXh0LmpzXCI7XG5pbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tIFwiLi9saWIvaW50ZXJmYWNlL3ZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IHsgSGlzdG9yeVNlcnZpY2UsIElIaXN0b3J5U2VydmljZSB9IGZyb20gXCIuL2xpYi9zZXJ2aWNlLmpzXCI7XG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSBcIi4vbGliL2ludGVyZmFjZS9sb2dnZXIuanNcIjtcbmltcG9ydCB7IHNldEZhaWxlZCB9IGZyb20gXCJAYWN0aW9ucy9jb3JlXCI7XG5pbXBvcnQgeyBzdHJpbmdUb09wdGlvbiB9IGZyb20gXCIuL2xpYi91dGlsXCI7XG5pbXBvcnQgKiBhcyBvcyBmcm9tIFwib3NcIjtcblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgaW86IEFjdGlvbklPID0gbmV3IEdpdGh1YkFjdGlvbklPKCk7XG4gIGNvbnN0IGxvZzogSUxvZ2dlciA9IG5ldyBHaXRodWJBY3Rpb25Mb2dnZXIoKTtcbiAgY29uc3QgYXV0aCA9IGlvLmdldChcImdpdGh1Yl90b2tlblwiKTtcbiAgY29uc3QgZ2lzdElkID0gaW8uZ2V0KFwiZ2lzdF9pZFwiKTtcbiAgY29uc3Qgb2sgPSBuZXcgT2N0b2tpdCh7IGF1dGggfSk7XG4gIGNvbnN0IGt2OiBLZXlWYWx1ZVJlcG9zaXRvcnkgPSBuZXcgR2lzdEtleVZhbHVlKG9rLCBnaXN0SWQpO1xuICBjb25zdCBjb250ZXh0OiBDb250ZXh0UmV0cmlldmVyID0gbmV3IEdpdGh1YkFjdGlvbkNvbnRleHRSZXRyaWV2ZXIoKTtcbiAgY29uc3QgaW5wdXRWYWxpZGF0b3I6IFZhbGlkYXRvcjxJbnB1dEFycmF5PiA9IG5ldyBab2RWYWxpZGF0b3JBZGFwdGVyKFxuICAgIGlucHV0QXJyYXlcbiAgKTtcbiAgY29uc3QgaW5wdXQ6IElucHV0UmV0cmlldmVyID0gbmV3IElvSW5wdXRSZXRyaWV2ZXIoXG4gICAgaW8sXG4gICAgY29udGV4dCxcbiAgICBpbnB1dFZhbGlkYXRvclxuICApO1xuXG4gIGNvbnN0IHNlcnZpY2U6IElIaXN0b3J5U2VydmljZSA9IG5ldyBIaXN0b3J5U2VydmljZShrdik7XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoaW8sIGlucHV0LCBzZXJ2aWNlKTtcblxuICBhd2FpdCBhcHAuc3RhcnQoKS5tYXRjaCh7XG4gICAgbm9uZTogKCkgPT4ge1xuICAgICAgbG9nLmluZm8oXCLinIUgU3VjY2Vzc2Z1bGx5IHRyYWNrZWQgY29tbWl0IGFydGlmYWN0IG1ldGFkYXRhXCIpO1xuICAgIH0sXG4gICAgc29tZTogYXN5bmMgKGVycikgPT4ge1xuICAgICAgbG9nLmVycm9yKFwi4p2MIEZhaWxlZCB0byB0cmFjayBjb21taXQgYXJ0aWZhY3QgbWV0YWRhdGFcIik7XG4gICAgICBzZXRGYWlsZWQoZXJyKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgc3RyaW5nVG9PcHRpb24oZXJyPy5zdGFjaykubWF0Y2goe1xuICAgICAgICBub25lOiBbXCLinYwgTm8gc3RhY2t0cmFjZSBmb3VuZCFcIl0sXG4gICAgICAgIHNvbWU6IChzdGFja3RyYWNlKSA9PiBzdGFja3RyYWNlLnNwbGl0KG9zLkVPTCksXG4gICAgICB9KVxuICAgICAgZm9yIChjb25zdCBtIG9mIG1lc3NhZ2VzKSB7XG4gICAgICAgIGxvZy5lcnJvcihtKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuYXdhaXQgbWFpbigpO1xuIl19
